package schema

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "context"
    "github.com/Azure/go-autorest/tracing"
)

// AttachmentsClient is the the Bot Connector REST API allows your bot to send and receive messages to channels
// configured in the
// [Bot Framework Developer Portal](https://dev.botframework.com). The Connector service uses industry-standard REST
// and JSON over HTTPS.
//
// Client libraries for this REST API are available. See below for a list.
//
// Many bots will use both the Bot Connector REST API and the associated [Bot State REST API](/en-us/restapi/state).
// The
// Bot State REST API allows a bot to store and retrieve state associated with users and conversations.
//
// Authentication for both the Bot Connector and Bot State REST APIs is accomplished with JWT Bearer tokens, and is
// described in detail in the [Connector Authentication](/en-us/restapi/authentication) document.
//
// # Client Libraries for the Bot Connector REST API
//
// * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)
// * [Bot Builder for Node.js](/en-us/node/builder/overview/)
// * Generate your own from the [Connector API Swagger
// file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/ConnectorAPI.json)
//
// Â© 2016 Microsoft
type AttachmentsClient struct {
    BaseClient
}
// NewAttachmentsClient creates an instance of the AttachmentsClient client.
func NewAttachmentsClient() AttachmentsClient {
    return NewAttachmentsClientWithBaseURI(DefaultBaseURI, )
}

// NewAttachmentsClientWithBaseURI creates an instance of the AttachmentsClient client.
    func NewAttachmentsClientWithBaseURI(baseURI string, ) AttachmentsClient {
        return AttachmentsClient{ NewWithBaseURI(baseURI, )}
    }

// GetAttachmentInfoMethod get AttachmentInfo structure describing the attachment views
    // Parameters:
        // attachmentID - attachment id
func (client AttachmentsClient) GetAttachmentInfoMethod(ctx context.Context, attachmentID string) (result AttachmentInfoType, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/AttachmentsClient.GetAttachmentInfoMethod")
        defer func() {
            sc := -1
            if result.Response.Response != nil {
                sc = result.Response.Response.StatusCode
            }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        req, err := client.GetAttachmentInfoMethodPreparer(ctx, attachmentID)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".AttachmentsClient", "GetAttachmentInfoMethod", nil , "Failure preparing request")
    return
    }

            resp, err := client.GetAttachmentInfoMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".AttachmentsClient", "GetAttachmentInfoMethod", resp, "Failure sending request")
            return
            }

            result, err = client.GetAttachmentInfoMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".AttachmentsClient", "GetAttachmentInfoMethod", resp, "Failure responding to request")
            }

    return
    }

    // GetAttachmentInfoMethodPreparer prepares the GetAttachmentInfoMethod request.
    func (client AttachmentsClient) GetAttachmentInfoMethodPreparer(ctx context.Context, attachmentID string) (*http.Request, error) {
            pathParameters := map[string]interface{} {
            "attachmentId": autorest.Encode("path",attachmentID),
            }

        preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPathParameters("/v3/attachments/{attachmentId}",pathParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetAttachmentInfoMethodSender sends the GetAttachmentInfoMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client AttachmentsClient) GetAttachmentInfoMethodSender(req *http.Request) (*http.Response, error) {
        sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            return autorest.SendWithSender(client, req, sd...)
            }

// GetAttachmentInfoMethodResponder handles the response to the GetAttachmentInfoMethod request. The method always
// closes the http.Response Body.
func (client AttachmentsClient) GetAttachmentInfoMethodResponder(resp *http.Response) (result AttachmentInfoType, err error) {
    err = autorest.Respond(
    resp,
    client.ByInspecting(),
    azure.WithErrorUnlessStatusCode(http.StatusOK),
    autorest.ByUnmarshallingJSON(&result),
    autorest.ByClosing())
    result.Response = autorest.Response{Response: resp}
        return
    }

// GetAttachmentMethod get the named view as binary content
    // Parameters:
        // attachmentID - attachment id
        // viewID - view id from attachmentInfo
func (client AttachmentsClient) GetAttachmentMethod(ctx context.Context, attachmentID string, viewID string) (result ReadCloserType, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/AttachmentsClient.GetAttachmentMethod")
        defer func() {
            sc := -1
            if result.Response.Response != nil {
                sc = result.Response.Response.StatusCode
            }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        req, err := client.GetAttachmentMethodPreparer(ctx, attachmentID, viewID)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".AttachmentsClient", "GetAttachmentMethod", nil , "Failure preparing request")
    return
    }

            resp, err := client.GetAttachmentMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".AttachmentsClient", "GetAttachmentMethod", resp, "Failure sending request")
            return
            }

            result, err = client.GetAttachmentMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".AttachmentsClient", "GetAttachmentMethod", resp, "Failure responding to request")
            }

    return
    }

    // GetAttachmentMethodPreparer prepares the GetAttachmentMethod request.
    func (client AttachmentsClient) GetAttachmentMethodPreparer(ctx context.Context, attachmentID string, viewID string) (*http.Request, error) {
            pathParameters := map[string]interface{} {
            "attachmentId": autorest.Encode("path",attachmentID),
            "viewId": autorest.Encode("path",viewID),
            }

        preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPathParameters("/v3/attachments/{attachmentId}/views/{viewId}",pathParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetAttachmentMethodSender sends the GetAttachmentMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client AttachmentsClient) GetAttachmentMethodSender(req *http.Request) (*http.Response, error) {
        sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            return autorest.SendWithSender(client, req, sd...)
            }

// GetAttachmentMethodResponder handles the response to the GetAttachmentMethod request. The method always
// closes the http.Response Body.
func (client AttachmentsClient) GetAttachmentMethodResponder(resp *http.Response) (result ReadCloserType, err error) {
    result.Value = &resp.Body
    err = autorest.Respond(
    resp,
    client.ByInspecting(),
    azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusMovedPermanently,http.StatusFound))
    result.Response = autorest.Response{Response: resp}
        return
    }

